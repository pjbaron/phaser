This file shows the merged results of PJBNOTE and PIXI searches through the /src folder of the PhaserSansPixi project.
What we should be able to see here is all uses of PIXI in Phaser 2.X along with the comment I added previously about how to deal with it.
It forms a summary list of changes required to fit the new renderer into Phaser 2.X and remove PIXI without causing errors.

   
Updated 11th August 2015 following the merge update to version 2.4.4 of the Phaser dev branch.


Searching 198 files for "PJBNOTE" (case sensitive, whole word)

C:\wamp\www\phaser_sans_pixi\src\animation\AnimationManager.js:
  412: // PJBNOTE: I'm not sure what this is supposed to do... under what circumstances would it be used?
  413: //        this.sprite.setTexture(PIXI.TextureCache[this.currentFrame.uuid]);

C:\wamp\www\phaser_sans_pixi\src\core\Camera.js:
   87: // PJBNOTE: this is probably equivalent to the new renderer pbPhaserRender.rootLayer, however I believe this whole camera approach is obsolete due to new layers.
  278:             // PJBNOTE: worldTransform is a PIXI property... are .a and .d equivalent to transform.x and .y??

C:\wamp\www\phaser_sans_pixi\src\core\Filter.js:
   47: // PJBNOTE: this approach to Filters is obsolete, the new renderer provides full user-defined filter support.  May be desirable to wrap it with this class for backwards compatibility.

C:\wamp\www\phaser_sans_pixi\src\core\FlexGrid.js:
  110: // PJBNOTE: children here can probably be replaced with new renderer sprites but all accessors will need to be traced to ensure parameter consistency afterwards.
  111:      * @param {PIXI.DisplayObject[]} [children] - An array of children that are used to populate the   
  199: // PJBNOTE: children here can probably be replaced with new renderer sprites but all accessors will need to be traced to ensure parameter consistency afterwards.
  200:      * @param {PIXI.DisplayObject[]} [children] - An array of children that are used to populate the FlexLayer.

C:\wamp\www\phaser_sans_pixi\src\core\Game.js:
  243: // PJBNOTE: provide an equivalent
  388: // PJBNOTE: temporarily disabled during merge with new renderer... TODO: reactivate when 'key' supports Phaser.BitmapData again
  639: // PJBNOTE: removed version number for PIXI, new renderer should have a version string
  640: //                '%c %c %c Phaser v' + v + ' | Pixi.js ' + PIXI.VERSION + ' | ' + r + ' | ' + a +   
  666: // PJBNOTE: add version for new renderer            
  667: //            console.log('Phaser v' + v + ' | Pixi.js ' + PIXI.VERSION + ' | ' + r + ' | ' + a + ' | http://phaser.io');
  860: // PJBNOTE: stage is now rootLayer
  912: // PJBNOTE: stage is now rootLayer and is processed via the new renderer
  916: // PJBNOTE: stage is now rootLayer and is processed via the new renderer
  925: // PJBNOTE: stage is now rootLayer and is processed via the new renderer
  967: // PJBNOTE: TODO: this.stage parameter is currently ignored, renderer is probably using rootLayer global still...

C:\wamp\www\phaser_sans_pixi\src\core\Group.js:
   63: // PJBNOTE: CRITICAL CHANGE... this will need to be updated before any Phaser demos will run with the new renderer
   64: //    PIXI.DisplayObjectContainer.call(this);
 1378: // PJBNOTE: deprecated, the pbTransformObject update method does this directly

C:\wamp\www\phaser_sans_pixi\src\core\Stage.js:
    1: // // PJBNOTE: sounds like this is equivalent to pbPhaserRender.rootLayer in the new renderer with a few extra features (loss of focus etc)
    2: // // PJBNOTE: decisions to be made whether we want a single Stage which is separate (or derived) from the new layer system... it may prevent tricks like having multiple canvas objects acting as separate stages.
    3: // // PJBNOTE: CRITICAL CHANGE... this will need to be updated before any Phaser demos will run with the new renderer

C:\wamp\www\phaser_sans_pixi\src\core\World.js:
   76:     // PJBNOTE: Stage is now using pbPhaserRender.rootLayer but I believe addChild will still function (pbBaseLayer extends pbTransformObject)

C:\wamp\www\phaser_sans_pixi\src\gameobjects\BitmapData.js:
   48:     // PJBNOTE: 2.4.4 changed this to this.canvas = PIXI.CanvasPool.create(this, width, height);
  114: // PJBNOTE: after reading PIXI.BaseTexture source, it may be possible to simply store a canvas reference here instead.
  115: // PJBNOTE: 2.4.4 changed this to this.baseTexture = new PIXI.BaseTexture(this.canvas);
  122: // PJBNOTE: 2.4.4 changed this to this.texture = new PIXI.Texture(this.baseTexture);
  132: // PJBNOTE: skipping this for now (20/8/2015), it's not needed for the first pass integration
  548: // PJBNOTE: I made this.baseTexture = this.canvas
  555: // PJBNOTE: skipping this for now (20/8/2015), it's not needed for the first pass integration
  559: // PJBNOTE: skipping this for now (20/8/2015), it's not needed for the first pass integration
 1239: // PJBNOTE: new renderer does not yet support tinted canvas
 1240: //                    source.tintedTexture = PIXI.CanvasTinter.getTintedTexture(source, source.tint);
 1821: // PJBNOTE: destroy the Phaser canvas here instead
 1822: //        PIXI.CanvasPool.remove(this);

C:\wamp\www\phaser_sans_pixi\src\gameobjects\BitmapText.js:
   34: * // PJBNOTE: change this to extend pbText and check all parameters and methods accessed from the super class
  160: // PJBNOTE: CRITICAL CHANGE - switch to pbTransformObject or pbBaseImage?
  384: // PJBNOTE: create new pbSprite here
  385: //                g = new PIXI.Sprite(charData.texture);
  486: // PJBNOTE: is updateTransform required with the new renderer?
  487: //PIXI.DisplayObjectContainer.prototype.updateTransform.call(this);

C:\wamp\www\phaser_sans_pixi\src\gameobjects\Graphics.js:
   45: // PJBNOTE: may move this class functionality into the renderer (see note below @line 83)
   46:     //PIXI.Graphics.call(this);
   52: // PJBNOTE: basic drawing functions.  Should this be in the renderer itself?
   53: // PJBNOTE: CRITICAL CHANGE... need to decide what exactly to do here
   54: //Phaser.Graphics.prototype = Object.create(PIXI.Graphics.prototype);

C:\wamp\www\phaser_sans_pixi\src\gameobjects\Image.js:
   12: // PJBNOTE: I expect this will change to wrap the new renderer pbSprite, but maybe it's closer to the pbImage or pbTransformObject?
   52: // PJBNOTE: new Core.init function probably supercedes this.createWithKey

C:\wamp\www\phaser_sans_pixi\src\gameobjects\RenderTexture.js:
    7: // PJBNOTE: this seems to be directly equivalent to something I've been calling RTT (render-to-texture) in the new renderer
    8: // PJBNOTE: unless it adds some new features, the entire class should be deprecated.  Otherwise it may need to extend pbImage and redirect the draw methods
    9: // PJBNOTE: to the special purpose rtt functions in pbWebGl.js
   50: // PJBNOTE: see if PIXI.Matrix is 2d or 3d (3 or 4 column homogenous) and use the appropriate version of pbMatrix... check all parameters and method calls
   51: //    this.matrix = new PIXI.Matrix();
   53: // PJBNOTE: if this class survives the transition (see notes in file header comments) this needs an equivalent
   54: //    PIXI.RenderTexture.call(this, width, height, this.game.renderer, scaleMode, resolution);
   60: // PJBNOTE: CRITICAL CHANGE - if this class survives the transition (see notes in file header comments) this needs an equivalent object to extend
   61: //Phaser.RenderTexture.prototype = Object.create(PIXI.RenderTexture.prototype);
   85: // PJBNOTE: deprecated class?  even if not, the new renderer redirects such drawing calls through an intermediary layer automatically
   86:     // if (this.renderer.type === PIXI.WEBGL_RENDERER)
  114: // PJBNOTE: does new renderer require this sort of check?  I hope not...
  115: //    if (this.renderer.type === PIXI.WEBGL_RENDERER)
  151: // PJBNOTE: deprecated class?  even if not, the new renderer redirects such drawing calls through an intermediary layer automatically
  152:     // if (this.renderer.type === PIXI.WEBGL_RENDERER)

C:\wamp\www\phaser_sans_pixi\src\gameobjects\RetroFont.js:
    7: // PJBNOTE: directly equivalent to pbText (as at 11th August 2015)... deprecate or extend that class

C:\wamp\www\phaser_sans_pixi\src\gameobjects\Rope.js:
    7: // PJBNOTE: I think this can be replaced by using texture offsets in pbSurface (see pbInvaders demo which used this for it's starfield for a while)
    8: // PJBNOTE: Further for webGl purposes, setting the pbSurface.isTiled flag will enable gl.WRAP in both directions
    9: // PJBNOTE: I suspect this whole class can be deprecated unless it does something more than described in the comments below
   68: // PJBNOTE: CRITICAL CHANGE... need to decide what exactly to do here
   69:     // PIXI.Rope.call(this, PIXI.TextureCache['__default'], this.points);
   76: // PJBNOTE: CRITICAL CHANGE... need to decide what exactly to do here
   77: //Phaser.Rope.prototype = Object.create(PIXI.Rope.prototype);

C:\wamp\www\phaser_sans_pixi\src\gameobjects\Sprite.js:
    7: // PJBNOTE: should be possible to merge with pbSprite... process underway
    8: // PJBNOTE: pbSprite uses pbTransformObject to store a transform, pbImage for currentCell, and pbSurface (indirectly through image) for the texture

C:\wamp\www\phaser_sans_pixi\src\gameobjects\SpriteBatch.js:
    7: // PJBNOTE: find out how similar the SpriteBatch class is to the new renderer's built in batching (via layers)... this whole class may be obsolete
    8: // PJBNOTE: this may be more similar to the 'direct pipeline' of the pbSimpleLayer which is optimised for even faster sprite batching
   30: // PJBNOTE: call super or merge features as discussed at the top of this class
   31: //    PIXI.SpriteBatch.call(this);
   43: // PJBNOTE: CRITICAL CHANGE - need to decide how to handle this class (see comments at top)
   44: //Phaser.SpriteBatch.prototype = Phaser.Utils.extend(true, Phaser.SpriteBatch.prototype, Phaser.Group.prototype, PIXI.SpriteBatch.prototype);

C:\wamp\www\phaser_sans_pixi\src\gameobjects\Text.js:
   85: // PJBNOTE: critical fix!
   86:     //this.canvas = PIXI.CanvasPool.create(this);
  163: // PJBNOTE: critical fix! Need replacement for PIXI.Texture.fromCanvas(this.canvas)
  164:     //Phaser.Sprite.call(this, game, x, y, PIXI.Texture.fromCanvas(this.canvas));
  215: // PJBNOTE: fix this to remove the non-PIXI canvas
  216:     //PIXI.CanvasPool.remove(this);
 1186: // PJBNOTE: does the new renderer need support functions like this?
 1187: //PIXI.Sprite.prototype._renderWebGL.call(this, renderSession);
 1206: // PJBNOTE: does the new renderer need support functions like this?
 1207: //PIXI.Sprite.prototype._renderCanvas.call(this, renderSession);
 1346: // PJBNOTE:
 1347: //    return PIXI.Sprite.prototype.getBounds.call(this, matrix);
 1348:     return null;  // PJBNOTE: critical fix!
 1992: //PJBNOTE: CRITICAL CHANGE - extend from a new renderer canvas of some sort
 1993: //Phaser.Text.fontPropertiesCanvas = PIXI.CanvasPool.create(Phaser.Text.fontPropertiesCanvas);

C:\wamp\www\phaser_sans_pixi\src\gameobjects\TileSprite.js:
    7: // PJBNOTE: the new renderer supports this via the pbSurface.isTiled flag, not sure that it needs a separate class any more?
   90:     // PJBNOTE: class may be deprecated (see note at top), otherwise this should create a pbSurface with isTiled = true
   91:     //PIXI.TilingSprite.call(this, PIXI.TextureCache['__default'], width, height);
   97: // PJBNOTE: CRITICAL CHANGE - remove class entirely?
   98: //Phaser.TileSprite.prototype = Object.create(PIXI.TilingSprite.prototype);
  194: // PJBNOTE: fix this to clean up new system
  195:     // PIXI.TilingSprite.prototype.destroy.call(this);

C:\wamp\www\phaser_sans_pixi\src\geom\Circle.js:
  573: // PJBNOTE: probably not required with new renderer, I'll avoid namespace clashes so this sort of thing shouldn't happen ever
  574: //PIXI.Circle = Phaser.Circle;

C:\wamp\www\phaser_sans_pixi\src\geom\Ellipse.js:
  326: // PJBNOTE: probably not required with new renderer, I'll avoid namespace clashes so this sort of thing shouldn't happen ever
  327: //PIXI.Ellipse = Phaser.Ellipse;
  
C:\wamp\www\phaser_sans_pixi\src\geom\Point.js:
  906: // PJBNOTE: probably not required with new renderer, I'll avoid namespace clashes so this sort of thing shouldn't happen ever
  907: //PIXI.Point = Phaser.Point;
  
C:\wamp\www\phaser_sans_pixi\src\geom\Polygon.js:
  292: // PJBNOTE: probably not required with new renderer, I'll avoid namespace clashes so this sort of thing shouldn't happen ever
  293: //  Because PIXI uses its own type, we'll replace it with ours to avoid duplicating code or confusion.
  294: //PIXI.Polygon = Phaser.Polygon;

C:\wamp\www\phaser_sans_pixi\src\geom\Rectangle.js:
 1005: // PJBNOTE: probably not required with new renderer, I'll avoid namespace clashes so this sort of thing shouldn't happen ever
 1007: // PJBNOTE: probably not required with new renderer, I'll avoid namespace clashes so this sort of thing shouldn't happen ever
 1008: //PIXI.EmptyRectangle = new Phaser.Rectangle(0, 0, 0, 0);

C:\wamp\www\phaser_sans_pixi\src\input\Input.js:
  456: // PJBNOTE: remove canvas
  457: //      PIXI.CanvasPool.remove(this);
  859: // PJBNOTE: PIXI properties.. what are .a, .b, .c and .d in pbTransformObject terms?  Bits of the transform matrix I suspect...
  868: // PJBNOTE: I'm not sure exactly how 'local' these coordinates need to be... these might need to incorporate more factors
  882: // PJBNOTE: this was a very well hidden PIXI property, and is unused anywhere else in the whole of Phaser
  895: // PJBNOTE: see TileSprite.js for comments about removing that class
  914:             // PJBNOTE: TODO: pointer doesn't take into account world scroll offset (camera) yet

C:\wamp\www\phaser_sans_pixi\src\input\InputHandler.js:
 1491: // PJBNOTE: 2.4.4 uses this.sprite.left here
 1496: // PJBNOTE: 2.4.4 uses this.sprite.right here
 1502: // PJBNOTE: 2.4.4 uses this.sprite.top here
 1507: // PJBNOTE: 2.4.4 uses this.sprite.bottom here
 1513: // PJBNOTE: I'll need to incorporate left/right/top/bottom/offsetX and offsetY into pbSprite
 1565: // PJBNOTE: I'll need to incorporate left/right/top/bottom/offsetX and offsetY into pbSprite

C:\wamp\www\phaser_sans_pixi\src\loader\Cache.js:
  250:         // PJBNOTE: TODO: what size is the Image texture?
  252:         // PJBNOTE: TODO: look at PIXI source and find out what the extra 'data' object can contain, for now I'll just stick it in here so it isn't lost!
  291: // PJBNOTE: see first note for decision about these
  292:         // PIXI.TextureCache['__default'] = new PIXI.Texture(obj.base);
  313: // PJBNOTE: see first note for decision about these
  314:         // PIXI.TextureCache['__missing'] = new PIXI.Texture(obj.base);
  456:         // PJBNOTE: TODO: what size is the bitmap font texture?
  458:         // PJBNOTE: TODO: look at PIXI source and find out what the extra 'data' object can contain, for now I'll just stick it in here so it isn't lost!
  582:         // PJBNOTE: TODO: look at PIXI source and find out what the extra 'data' object can contain, for now I'll just stick it in here so it isn't lost!
  616:         // PJBNOTE: TODO: what size is the texture atlas?
  618:         // PJBNOTE: TODO: look at PIXI source and find out what the extra 'data' object can contain, for now I'll just stick it in here so it isn't lost!
 1584: // PJBNOTE: may need a 'getRendererTexture' equivalent depending on implementation
 1585:     // getPixiTexture: function (key) {
 1617: // PJBNOTE: may need a 'getRendererBaseTexture' equivalent depending on implementation
 1618:     // getPixiBaseTexture: function (key) {
 1730: // PJBNOTE: may need removeFrom flag for new renderer depending on implementation
 1731:         // if (removeFromPixi && img.base)

C:\wamp\www\phaser_sans_pixi\src\loader\LoaderParser.js:
   19: PJBNOTE: this PIXI reference needs to be changed to the new renderer or Phaser
   67: // PJBNOTE: pbText replaces prior bitmap-font handling, probably want a reference to its pbSurface here
   68: //                texture: PIXI.TextureCache[cacheKey] = new PIXI.Texture(PIXI.BaseTextureCache[cacheKey], textureRect)
   92: PJBNOTE: this PIXI reference needs to be changed to the new renderer or Phaser
   93:     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture this font uses.
  150: PJBNOTE: this PIXI reference needs to be changed to the new renderer or Phaser
  151:     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture this font uses.
  163: // PJBNOTE: critical fix, need to use a new renderer texture
  164: //              letter.texture = new PIXI.Texture(baseTexture, new Phaser.Rectangle(letter.x, letter.y, letter.width, letter.height));

C:\wamp\www\phaser_sans_pixi\src\system\Device.js:
 1133: // PJBNOTE: is this equivalent?
 1135: //        var elem = PIXI.CanvasPool.create(this, 1, 1);
 1145: // PJBNOTE: can we remove the document canvas now?
 1146: //        PIXI.CanvasPool.remove(this);

C:\wamp\www\phaser_sans_pixi\src\tilemap\TilemapLayer.js:
    7: // PJBNOTE: this may be obsolete, the new renderer handles tile layers directly... depends on how many new features this class offers and whether
    8: // PJBNOTE: it's worth carrying them over into the new renderer or simpler to keep them here
   62: // PJBNOTE: revert change made between 2.2.0 and 2.4.4
   63: //    this.canvas = PIXI.CanvasPool.create(this, width, height);
   73: // PJBNOTE: TODO: change this to the new renderer
   74: //    this.setTexture(new PIXI.Texture(new PIXI.BaseTexture(this.canvas)));
  317: // PJBNOTE: TODO: new renderer equivalent of CanvasPool?
  318: //    PIXI.CanvasPool.remove(this);

C:\wamp\www\phaser_sans_pixi\src\utils\Debug.js:
  111: // PJBNOTE: equivalent?
  112: //            this.canvas = PIXI.CanvasPool.create(this, this.game.width, this.game.height);
  824: // PJBNOTE: TODO: find a Phaser/new renderer equivalent  
  825: //        PIXI.CanvasPool.remove(this);

107 matches across 31 files
